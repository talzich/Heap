import java.util.ArrayList;

public class myHeap<E> {

	//this class will implement max heap

	private ArrayList<E> arr;
	private int lastPosition;


	//Initializes the array that implements the heap and sets size to 0
	public myHeap(){

		arr = new ArrayList<E>();

	}

	/* Returns number of elements (nodes) in the heap*/ 
	public int getSize() {
		return lastPosition+1;
	}

	/*
	 * Adds element to last position in array, which is represented
	 * by right-most element in the deepest level of the heap
	 */
	public void add(E element) {

		if(arr.size() == 0) {
			
			arr.add(element);
			trickleUp(lastPosition);
			
		}
		
		else
		{
			arr.add(element);
			trickleUp(++lastPosition);
			
		}
		
	

	}

	/*
	 * Checks to see if the element just added to heap violated heap rules
	 * If so, calls trickleUp to fix this violation 
	 */
	private void checkViolations(ArrayList<E> arr, int index) {

		trickleUp(index);
		trickleDown(index);



	}

	/*
	 * When element violates heap rules, this function is called in order to 
	 * set the element to its right position. 
	 * If element is larger than its parent, it swaps them recursively.
	 */
	private void trickleUp(int index) {

		int parent = Math.floorDiv(index - 1 , 2);


		/* 
		 * Base case. Recursion will stop when element is at top of heap.
		 * It should also stop when element is at its correct position
		 */

		if(index == 0)return; 

		if(((Comparable<E>)arr.get(index)).compareTo(arr.get(parent)) > 0 )
		{
			swap(index,parent);
			trickleUp(parent);
		}

		else return;

	}

	//simple swap funciton
	private void swap( int i, int j) {
		E tmp = arr.get(i);
		arr.set(i, arr.get(j));
		arr.set(j, tmp);

	}

	public String toString() {

		return arr.subList(0, lastPosition+1).toString();
	}

	public E remove() {

		E res = arr.get(0);

		swap(0, lastPosition--);

		trickleDown(0);
		
		arr.remove(lastPosition+1);

		return res; 
	}

	private void trickleDown( int i) {

		int left = 2*i +1;
		int right = 2*i + 2;
		
		if(left > lastPosition || right > lastPosition) 
			return;

		 
		if((((Comparable<E>)arr.get(left)).compareTo(arr.get(right)) > 0 )&&
				(((Comparable<E>)arr.get(left)).compareTo(arr.get(i)) > 0 ))
		{
			swap(i, left);
			return;
		}
		
		if((((Comparable<E>)arr.get(left)).compareTo(arr.get(right)) < 0 )&&
				(((Comparable<E>)arr.get(right)).compareTo(arr.get(i)) > 0 ))
		{
			swap(i, right);
			return;
		}
		
		if(left == lastPosition &&(((Comparable<E>)arr.get(i)).compareTo(arr.get(left)) < 0 ))
		{
			swap(i, left);
			return;
		}

		if(right == lastPosition &&(((Comparable<E>)arr.get(i)).compareTo(arr.get(right)) < 0 ))
		{
			swap(i, right);
			return;
		}

		


	}

	public void replace(E oldKey, E newKey) {

		for (int i = 0; i <= lastPosition; i++) 
		{
			if(oldKey == arr.get(i))
			{
				arr.set(i, newKey);
				checkViolations(arr, i);
				return; 
			}

		}
		System.out.println("Element " + oldKey + " not found");
	}


	public static void main(String[] args) {

		


	}





}
